@startuml
autonumber
actor "Estafeta" as EST

participant ":RegistarEntregaUI" as UI
participant ":RegistarEntregaController" as CTRL
participant "sessao\n:SessaoUtilizador" as SESSAO

participant ":EstafetaDB" as ESTDB
participant ":EntregaDB" as ENTRDB
participant ":FarmaciaDB" as FARDB
participant ":EncomendaDB" as RENC
participant ":VeiculoDB" as RS
participant ":EnderecoDB" as END

activate EST
EST -> UI : inicia entrega
activate UI
UI -> CTRL : getEstafeta()
activate CTRL
CTRL -> SESSAO: app = getInstance()
activate SESSAO
|||
deactivate SESSAO
CTRL -> SESSAO: sessao = getSessaoAtual()
activate SESSAO
|||
deactivate SESSAO

CTRL -> SESSAO: nif = getNif()
activate SESSAO
|||
deactivate SESSAO
CTRL -> ESTDB : est = getEstafetaByNIF(nif)
activate ESTDB
deactivate ESTDB
deactivate CTRL
UI -> CTRL : getLstFarmacias()
activate CTRL
CTRL -> FARDB : listaFarmacia = getLstFarmacias()
activate FARDB
deactivate FARDB
deactivate CTRL
UI --> EST : mostra uma lista de farmacia e solicita a escolha de uma farmacia
deactivate UI

EST -> UI : introduz dados solicitados
activate UI
UI -> CTRL : getListaEncomenda(nifFarmacia)
activate CTRL
CTRL -> RENC : listaEncomendas=getListaEncomenda(nifFarmacia)
activate RENC
deactivate RENC
deactivate CTRL
loop
UI -> CTRL : getEnderecoByNifCliente(nif)
activate CTRL
CTRL -> END : end = getEnderecoByNifCliente(nif)
activate END
deactivate END
deactivate CTRL
end loop


UI --> EST : apresenta dados e solicita confirmação
deactivate UI

EST -> UI : confirma os dados
activate UI
UI -> CTRL : getEnderecoOrigem(nifFarmacia)
activate CTRL
CTRL -> END : endereco = getEnderecoOrigem(nifFarmacia)
activate END
deactivate END
deactivate CTRL
UI -> CTRL : getLstEnderecosScooter()
activate CTRL
CTRL-> END : listaEnderecos = getLstEnderecosScooter()
activate END
deactivate END
deactivate CTRL
UI -> CTRL : getListaVeiculoEntrega(pesoMaximoEntrega, nifFarmacia)
activate CTRL
CTRL -> RS : listaVeiculos = getListaVeiculoEntrega(pesoMaximoEntrega, nifFarmacia)
activate RS
deactivate RS
deactivate CTRL
UI -> CTRL : generateGrafo(graphDistanciaScooter, listEnderecosScooter,Terrestre)
activate CTRL
CTRL -> FARDB : generateGrafo(graphDistanciaScooter, listEnderecosScooter,Terrestre)
activate FARDB
deactivate FARDB
deactivate CTRL
loop
UI -> CTRL : generateGraphScooter(listEnderecosScooter, listEnderecos, est, veiculo, pesoEntrega)
activate CTRL
CTRL -> ENTRDB : graphScooter = generateGraphScooter(listEnderecosScooter, listEnderecos, est, veiculo, pesoEntrega)
activate ENTRDB
deactivate ENTRDB
deactivate CTRL
UI -> CTRL : getPath(graphScooter, graphDistanciaScooter, listEnderecos, finalShortPathScooter, endereco, 0, veiculo, 0, list)
activate CTRL
CTRL -> ENTRDB : getPath(graphScooter, graphDistanciaScooter, listEnderecos, finalShortPathScooter, endereco, 0, veiculo, 0, list)
activate ENTRDB
deactivate ENTRDB
deactivate CTRL
end loop
UI --> EST : informa operação bem sucedida
deactivate CTRL
deactivate UI

deactivate EST

@enduml