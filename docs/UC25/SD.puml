@startuml
autonumber
'hide footbox
actor "Cliente" as CLI

participant ":RealizaEncomendaUI" as UI
participant ":RealizaEncomendaController" as CTRL
participant ":PedirItemFarmaciaController" as CTRL1
participant ":UserSession" as USS
participant ":ClienteDB" as DH
participant ":Cliente" as CLIEN
participant ":ProdutoDB" as PDH
participant ":Farmacia" as FAR
participant ":Produto" as PRO
participant ":EncomendaDB" as EDH
participant ":FarmaciaDB" as FDB
participant ":EnderecoDB" as END
participant ":ReciboDB" as RDH
participant ":PedirItemFarmaciaDB" as PEIC
participant ":TransferenciaDB" as TDB
participant "rec:Recibo" as REC
participant ":EmailDB" as EMDB
participant "lprodutos\n:ListaProdutosEncomenda" as LPROD
participant "enc: Encomenda" as ENC


CLI --> UI : pretende realizar a encomenda
activate CLI
activate UI


LOOP
activate CTRL
UI --> CTRL : getListStock(nif)

CTRL --> PDH : getLista(nif)
activate PDH
deactivate PDH
END LOOP

UI --> CTRL : getCliente()

CTRL --> USS : getUser()
activate USS
deactivate USS

CTRL --> CLIEN : nif = getNIF()
activate CLIEN
deactivate CLIEN

UI --> CTRL : enderecoCliente = getEnderecoByNifCliente(nif)

CTRL --> END : getEnderecoByNifCliente(nif)
activate END
deactivate END
deactivate CTRL

activate CTRL1
UI --> CTRL1 : generateGraph(graph)

CTRL1 --> FDB : generateGraph(graph)
activate FDB
deactivate FDB

deactivate CTRL1

deactivate CTRL

UI --> CLI : apresenta lista de produtos e pede para selecionar os produtos para a encomenda
deactivate UI


LOOP
CLI --> UI : introduz o produto e a quantidade que pretende
activate UI

UI --> CTRL : produtoEncomenda(nif,produto,quant)
activate CTRL

CTRL --> CTRL : verificaProdutoStock(produto,quant)

OPT
note  over CTRL : Se nao houver o produto no stock na 1 farmacia percorre a lista de farmacias para encontrar outra farmacia com o stock 

LOOP 

activate CTRL1
UI --> CTRL1 : getFarmaciaProxima(graph,enderecoCliente, lista)

CTRL1 --> FDB : farmciaProximaCliente = getFarmaciaProxima(graph,enderecoCliente, lista)
activate FDB
deactivate FDB

CTRL1 --> FAR : nifFarmProx = getNIF()
activate FAR 
deactivate FAR

deactivate CTRL1
deactivate CTRL
UI --> PEIC : realizaPedido(farmacia1, farmciaProximaCliente, produto, quantidade)
activate PEIC

PEIC --> TDB : realizaPedido(fOrig, fDest, prod, quantidade)
activate TDB

TDB --> TDB: addTransferencia(nif1, nif2, id, quantidade, 1)
TDB --> TDB: enviarStock(fOrig, fDest, prod, quantidade)

deactivate TDB

deactivate PEIC

activate CTRL
END LOOP

END OPT

CTRL --> LPROD : addNovoProduto(produto)
activate LPROD

deactivate PDH
deactivate LPROD

CTRL --> PRO : preco = getPreco()
activate PRO
deactivate PRO

CTRL --> PRO : peso = getPeso()
activate PRO
deactivate PRO

END LOOP

CTRL --> PDH : lista = getListaProdutos()
activate PDH
deactivate PDH

CTRL --> CTRL : precoTotal = getPrecoTotal()

CTRL --> UI : dataPedida = getData()

CTRL --> EDH : enc = novaEncomenda(lista, endereco, nifCliente, dataPedida, preco, peso, estado)
activate EDH

EDH --> ENC ** : create(lista, endereco, nifCliente, dataPedida, preco, peso, estado)
deactivate EDH

deactivate CTRL

UI --> CLI : apresenta a encomenda e pede confirmação
deactivate UI

CLI --> UI : confirma
activate UI

UI --> CTRL : registaEncomenda(enc)
activate CTRL

CTRL --> EDH : registaEncomenda(encomenda)
activate EDH
EDH -> EDH : validaEncomenda(enc)
EDH -> EDH: addEncomenda(enc)
deactivate EDH

deactivate CTRL

UI --> CTRL : novoRecibo(nifCliente, precoTotal, lista, dataPedida)
activate CTRL

CTRL --> RDH : create(nifCliente, precoTotal, lista, dataPedida)
activate RDH

RDH --> REC ** : create(nifCliente, precoTotal, lista, dataPedida)

RDH --> RDH : validateRecibo(rec)

RDH --> RDH : addRecibo(rec)
deactivate RDH

deactivate CTRL

UI --> CLI : solicita se quer pagar com creditos
deactivate UI

CLI --> UI : Insere os dados pedidos
activate UI

activate CTRL
UI --> CTRL : geraCreditos(c, precoTotal)

CTRL --> EDH : geraCreditos(c, precoTotal)
activate EDH
deactivate EDH

OPT
note over UI : se for sim
UI --> CTRL : getCreditosData(dataPedida, precoTotal)

CTRL --> EDH : creds = getCreditosData(dataPedida, precoTotal)
activate EDH
deactivate EDH


UI --> CTRL: removeCreditos(nifCliente, creds)

CTRL --> DH : removerCreditos(nifCliente, creds)
activate DH

deactivate DH
UI --> CLI : remove os creditos

END OPT

deactivate CTRL
UI --> CLI: gera o recibo e informa o sucesso da operação
deactivate UI
deactivate CLI

@enduml