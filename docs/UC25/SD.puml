@startuml
autonumber
'hide footbox
actor "Cliente" as CLI

participant ":RealizaEncomendaUI" as UI
participant ":RealizaEncomendaController" as CTRL
participant "sessao\n:SessaoUtilizador" as SESSAO
participant ":ClienteDB" as DH
participant ":Cliente" as CLIEN
participant ":ProdutoDB" as PDH
participant ":Produto" as PRO
participant ":EncomendaDB" as EDH
participant ":EnderecoDB" as END
participant ":ReciboDB" as RDH
participant "rec:Recibo" as REC
participant ":EmailDB" as EMDB
participant "lprodutos\n:ListaProdutosEncomenda" as LPROD
participant "enc: Encomenda" as ENC


CLI --> UI : pretende realizar uma encomenda
activate CLI
activate UI

UI --> CTRL : getListClients()
activate CTRL


CTRL -> SESSAO: sessao = getSessaoAtual()
activate SESSAO

CTRL --> SESSAO : email = getEmail()
deactivate SESSAO


CTRL --> DH : cliente = getClienteByEmail(email)
activate DH
deactivate DH

CTRL --> CLIEN : nifCLiente = getNif()
activate CLIEN
deactivate CLIEN

deactivate DH
CTRL --> PDH : getListaStock()
activate PDH
deactivate PDH

deactivate DH
deactivate CTRL

UI --> CLI : apresenta lista de produtos e pede para selecionar os produtos para a encomenda
deactivate UI


LOOP
CLI --> UI : introduz o produto
activate UI

UI --> CTRL : produtoEncomenda(produto)
activate CTRL

CTRL --> CTRL : verificaProdutoStock(prod)

OPT
note  over CTRL : Se nao houver o produto no stock

CTRL --> EMDB : sendEmail(email, assunto, mensagem)
activate EMDB
deactivate EMDB

END OPT


CTRL --> LPROD : addNovoProduto(produto)
activate LPROD

deactivate PDH
deactivate LPROD

CTRL --> PRO : preco = getPreco()
activate PRO
deactivate PRO

CTRL --> PRO : peso = getPeso()
activate PRO
deactivate PRO

END LOOP

CTRL --> PDH : lista = getListaProdutos()
activate PDH
deactivate PDH

CTRL --> CTRL : precoTotal = getPrecoTotal()

CTRL --> UI : dataPedida = getData()

CTRL --> EDH : enc = novaEncomenda(lista, endereco, nifCliente, dataPedida, preco, peso, estado)
activate EDH

EDH --> ENC ** : create(lista, endereco, nifCliente, dataPedida, preco, peso, estado)
deactivate EDH

deactivate CTRL

UI --> CLI : apresenta a encomenda e pede confirmação
deactivate UI

CLI --> UI : confirma
activate UI

UI --> CTRL : registaEncomenda(enc)
activate CTRL

CTRL --> EDH : registaEncomenda(encomenda)
activate EDH
EDH -> EDH : validaEncomenda(enc)
EDH -> EDH: addEncomenda(enc)
deactivate EDH

deactivate CTRL

UI --> CTRL : novoRecibo(nifCliente, precoTotal, lista, dataPedida)
activate CTRL

CTRL --> RDH : create(nifCliente, precoTotal, lista, dataPedida)
activate RDH

RDH --> REC ** : create(nifCliente, precoTotal, lista, dataPedida)

RDH --> RDH : validateRecibo(rec)

RDH --> RDH : addRecibo(rec)
deactivate RDH

deactivate CTRL

UI --> CLI : solicita se quer pagar com creditos
deactivate UI

CLI --> UI : Insere os dados pedidos
activate UI

UI --> CTRL : getCreditosData(dataPedida, precoTotal)
activate CTRL

CTRL --> EDH : creds = getCreditosData(dataPedida, precoTotal)
activate EDH
deactivate EDH

deactivate CTRL
UI --> CTRL: removeCreditos(nifCliente, creds)
activate CTRL

CTRL --> DH : removerCreditos(nifCliente, creds)
activate DH

deactivate DH
deactivate CTRL

UI --> CLI : remove os creditos, gera o recibo e informa o sucesso da operação
deactivate UI
deactivate CLI

@enduml