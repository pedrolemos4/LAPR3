@startuml
autonumber
actor "Estafeta" as EST

participant ":RegistarEntregaUI" as UI
participant ":RegistarEntregaController" as CTRL
participant "AplicacaoPOT" as _APP
participant "app\n:AplicacaoPOT" as APP
participant "sessao\n:SessaoUtilizador" as SESSAO

participant ":EstafetaDB" as ESTDB
participant ":EntregaDB" as ENTRDB
participant "entr:Entrega" as ENTR

participant ":ScooterDB" as RS


activate EST
EST -> UI : inicia registo de entrega
activate UI
UI -> CTRL : getEstafeta()
activate CTRL
CTRL -> _APP: app = getInstance()
activate _APP
|||
deactivate _APP
CTRL -> APP: sessao = getSessaoAtual()
activate APP
|||
deactivate APP

CTRL -> SESSAO: email = getEmailUtilizador()
activate SESSAO
|||
deactivate SESSAO
CTRL -> ESTDB : est=getEstafetaByEmail(email)
activate ESTDB
deactivate ESTDB
deactivate CTRL
UI -> CTRL : getListScooter()
activate CTRL
CTRL -> RS : list=getListScooter()
activate RS
deactivate RS
deactivate CTRL
UI --> EST : mostra lista de scooters e solicita o id da scooter
deactivate UI

EST -> UI : introduz dados solicitados
activate UI
UI -> CTRL : getScooter(idScooter)
activate CTRL
CTRL -> RS : scooter=getScooter(idScooter)
activate RS
deactivate RS
deactivate CTRL
UI -> CTRL: novaEntrega(dataInicio, dataFim, scooter, est)
activate CTRL
CTRL -> ENTRDB : entr=novaEntrega(idEntrega, dataInicio, dataFim, scooter, est)
activate ENTRDB
ENTRDB -> ENTR ** : create(idEntrega, dataInicio, dataFim, scooter, est)

deactivate ENTRDB
deactivate CTRL
UI --> EST : apresenta dados e solicita confirmação
deactivate UI

EST -> UI : confirma os dados
activate UI
UI -> CTRL : registaEntrega()
activate CTRL
CTRL-> ENTRDB : registaEntrega(entr)
activate ENTRDB
ENTRDB -> ENTRDB : validaEntrega(entr)
ENTRDB -> ENTRDB : addEntrega(entr)
deactivate ENTRDB

UI --> EST : informa operação bem sucedida
deactivate CTRL
deactivate UI

deactivate EST

@enduml